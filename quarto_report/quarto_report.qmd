---
title: Airbiome Microbial Association Networks Summary
fig-align: center
execute:
  echo: false
  output: asis
jupyter: python3
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    page-layout: full
    self-contained: true
include-in-header:
    text: |
        <style type="text/css">
        .footer {
        position: relative;
        left: 0;
        width: 100%;
        text-align: center;
        margin-top: 20px;
        }
        </style>
include-after-body:
    text: |
        <footer class="footer">
            This report was generated with
            <a href="https://github.com/Multiomics-Analytics-Group/vuegen" target="_blank">
                <img src="https://raw.githubusercontent.com/Multiomics-Analytics-Group/vuegen/HEAD/docs/images/logo/vuegen_logo.svg" alt="VueGen" width="65px">
            </a>
            | Copyright 2025 <a href="https://github.com/Multiomics-Analytics-Group" target="_blank">
            Multiomics Network Analytics Group (MoNA)</a>
        </footer>
---

```{python}
#| label: 'Imports'
from itables import show, init_notebook_mode
from pathlib import Path
import json
import pandas as pd
import plotly.io as pio
import requests


init_notebook_mode(all_interactive=True)
report_dir = Path().cwd()
```

# Adjacency Networks
## Nopge Genus Adj
### Nopge Gen Metrics Adj
```{python}
#| label: 'Nopge Gen Metrics Adj 1'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_genus_adj/1_NOPGE_gen_metrics_adj.xlsx')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Cclasso Nosinglt 65 Edgelist
**Number of nodes:** 252

**Number of edges:** 3056


<div style="text-align: center;">
<iframe src="static/Cclasso_Nosinglt_65_Edgelist.html" alt="Cclasso Nosinglt 65 Edgelist plot"
        width="800px" height="630px">
</iframe>
</div>

### Module Means
```{python}
#| label: 'Module Means 2'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_genus_adj/3_module_means.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Module Means Heatmap

```{python}
#| label: 'Module Means Heatmap 2'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_genus_adj/4_module_means_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Violin Plot Module Variability

```{python}
#| label: 'Violin Plot Module Variability 3'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_genus_adj/5_violin_plot_module_variability.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Module Metadata Correlations
```{python}
#| label: 'Module Metadata Correlations 3'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_genus_adj/6_module_metadata_correlations.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Correlation Volcano Plot

```{python}
#| label: 'Correlation Volcano Plot 4'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_genus_adj/7_correlation_volcano_plot.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Significant Module Metadata Corr
```{python}
#| label: 'Significant Module Metadata Corr 4'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_genus_adj/8_significant_module_metadata_corr.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Top Correlations Heatmap

```{python}
#| label: 'Top Correlations Heatmap 5'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_genus_adj/9_top_correlations_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

## Nopge Species Adj
### Nopge Sp 01 Cclasso Metrics
```{python}
#| label: 'Nopge Sp 01 Cclasso Metrics 5'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_species_adj/1_NOPGE_sp_01_cclasso_metrics.xlsx')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Cclasso Nosinglt 65 Edgelist
**Number of nodes:** 54

**Number of edges:** 142


<div style="text-align: center;">
<iframe src="static/Cclasso_Nosinglt_65_Edgelist.html" alt="Cclasso Nosinglt 65 Edgelist plot"
        width="800px" height="630px">
</iframe>
</div>

### Module Means
```{python}
#| label: 'Module Means 6'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_species_adj/3_module_means.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Module Means Heatmap

```{python}
#| label: 'Module Means Heatmap 7'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_species_adj/4_module_means_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Violin Plot Module Variability

```{python}
#| label: 'Violin Plot Module Variability 8'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_species_adj/5_violin_plot_module_variability.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Module Metadata Correlations
```{python}
#| label: 'Module Metadata Correlations 7'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_species_adj/6_module_metadata_correlations.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Correlation Volcano Plot

```{python}
#| label: 'Correlation Volcano Plot 9'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_species_adj/7_correlation_volcano_plot.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Top Correlations Heatmap

```{python}
#| label: 'Top Correlations Heatmap 10'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/NOPGE_species_adj/8_top_correlations_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

## Pge Genus Adj
### Pge Gen Metrics Adj
```{python}
#| label: 'Pge Gen Metrics Adj 8'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_genus_adj/1_PGE_gen_metrics_adj.xlsx')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Cclasso Nosinglt 45 Edgelist
**Number of nodes:** 47

**Number of edges:** 73


<div style="text-align: center;">
<iframe src="static/Cclasso_Nosinglt_45_Edgelist.html" alt="Cclasso Nosinglt 45 Edgelist plot"
        width="800px" height="630px">
</iframe>
</div>

### Module Means
```{python}
#| label: 'Module Means 9'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_genus_adj/3_module_means.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Module Means Heatmap

```{python}
#| label: 'Module Means Heatmap 12'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_genus_adj/4_module_means_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Violin Plot Module Variability

```{python}
#| label: 'Violin Plot Module Variability 13'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_genus_adj/5_violin_plot_module_variability.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Module Metadata Correlations
```{python}
#| label: 'Module Metadata Correlations 10'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_genus_adj/6_module_metadata_correlations.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Correlation Volcano Plot

```{python}
#| label: 'Correlation Volcano Plot 14'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_genus_adj/7_correlation_volcano_plot.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Significant Module Metadata Corr
```{python}
#| label: 'Significant Module Metadata Corr 11'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_genus_adj/8_significant_module_metadata_corr.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Top Correlations Heatmap

```{python}
#| label: 'Top Correlations Heatmap 15'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_genus_adj/9_top_correlations_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

## Pge Species Adj
### Pge Sp Metrics Adj
```{python}
#| label: 'Pge Sp Metrics Adj 12'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_species_adj/1_PGE_sp_metrics_adj.xlsx')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Cclasso Nosinglt 50 Edgelist
**Number of nodes:** 84

**Number of edges:** 139


<div style="text-align: center;">
<iframe src="static/Cclasso_Nosinglt_50_Edgelist.html" alt="Cclasso Nosinglt 50 Edgelist plot"
        width="800px" height="630px">
</iframe>
</div>

### Module Means
```{python}
#| label: 'Module Means 13'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_species_adj/3_module_means.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Module Means Heatmap

```{python}
#| label: 'Module Means Heatmap 17'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_species_adj/4_module_means_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Violin Plot Module Variability

```{python}
#| label: 'Violin Plot Module Variability 18'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_species_adj/5_violin_plot_module_variability.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Module Metadata Correlations
```{python}
#| label: 'Module Metadata Correlations 14'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_species_adj/6_module_metadata_correlations.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Correlation Volcano Plot

```{python}
#| label: 'Correlation Volcano Plot 19'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_species_adj/7_correlation_volcano_plot.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Significant Module Metadata Corr
```{python}
#| label: 'Significant Module Metadata Corr 15'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_species_adj/8_significant_module_metadata_corr.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Top Correlations Heatmap

```{python}
#| label: 'Top Correlations Heatmap 20'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Adjacency_networks/PGE_species_adj/9_top_correlations_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

# Association Networks
## Nopge Genus Asso
### Nopge Gen Metrics Asso
```{python}
#| label: 'Nopge Gen Metrics Asso 16'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_genus_asso/1_NOPGE_gen_metrics_asso.xlsx')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Cclasso Nosinglt 80 Edgelist
**Number of nodes:** 180

**Number of edges:** 1263


<div style="text-align: center;">
<iframe src="static/Cclasso_Nosinglt_80_Edgelist.html" alt="Cclasso Nosinglt 80 Edgelist plot"
        width="800px" height="630px">
</iframe>
</div>

### Module Means
```{python}
#| label: 'Module Means 17'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_genus_asso/3_module_means.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Module Means Heatmap

```{python}
#| label: 'Module Means Heatmap 22'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_genus_asso/4_module_means_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Violin Plot Module Variability

```{python}
#| label: 'Violin Plot Module Variability 23'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_genus_asso/5_violin_plot_module_variability.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Module Metadata Correlations
```{python}
#| label: 'Module Metadata Correlations 18'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_genus_asso/6_module_metadata_correlations.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Correlation Volcano Plot

```{python}
#| label: 'Correlation Volcano Plot 24'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_genus_asso/7_correlation_volcano_plot.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Significant Module Metadata Corr
```{python}
#| label: 'Significant Module Metadata Corr 19'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_genus_asso/8_significant_module_metadata_corr.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Top Correlations Heatmap

```{python}
#| label: 'Top Correlations Heatmap 25'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_genus_asso/9_top_correlations_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

## Nopge Species Asso
### Nopge Sp Metrics Asso
```{python}
#| label: 'Nopge Sp Metrics Asso 20'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_species_asso/1_NOPGE_sp_metrics_asso.xlsx')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Cclasso Nosinglt 75 Edgelist
**Number of nodes:** 75

**Number of edges:** 215


<div style="text-align: center;">
<iframe src="static/Cclasso_Nosinglt_75_Edgelist.html" alt="Cclasso Nosinglt 75 Edgelist plot"
        width="800px" height="630px">
</iframe>
</div>

### Module Means
```{python}
#| label: 'Module Means 21'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_species_asso/3_module_means.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Module Means Heatmap

```{python}
#| label: 'Module Means Heatmap 27'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_species_asso/4_module_means_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Violin Plot Module Variability

```{python}
#| label: 'Violin Plot Module Variability 28'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_species_asso/5_violin_plot_module_variability.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Module Metadata Correlations
```{python}
#| label: 'Module Metadata Correlations 22'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_species_asso/6_module_metadata_correlations.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Correlation Volcano Plot

```{python}
#| label: 'Correlation Volcano Plot 29'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_species_asso/7_correlation_volcano_plot.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Significant Module Metadata Corr
```{python}
#| label: 'Significant Module Metadata Corr 23'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_species_asso/8_significant_module_metadata_corr.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Top Correlations Heatmap

```{python}
#| label: 'Top Correlations Heatmap 30'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/NOPGE_species_asso/9_top_correlations_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

## Pge Genus Asso
### Pge Gen Metrics Asso
```{python}
#| label: 'Pge Gen Metrics Asso 24'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/PGE_genus_asso/1_PGE_gen_metrics_asso.xlsx')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Cclasso Nosinglt 40 Edgelist
**Number of nodes:** 53

**Number of edges:** 89


<div style="text-align: center;">
<iframe src="static/Cclasso_Nosinglt_40_Edgelist.html" alt="Cclasso Nosinglt 40 Edgelist plot"
        width="800px" height="630px">
</iframe>
</div>

### Module Means
```{python}
#| label: 'Module Means 25'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/PGE_genus_asso/3_module_means.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Module Means Heatmap

```{python}
#| label: 'Module Means Heatmap 32'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/PGE_genus_asso/4_module_means_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Violin Plot Module Variability

```{python}
#| label: 'Violin Plot Module Variability 33'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/PGE_genus_asso/5_violin_plot_module_variability.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Module Metadata Correlations
```{python}
#| label: 'Module Metadata Correlations 26'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/PGE_genus_asso/6_module_metadata_correlations.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Correlation Volcano Plot

```{python}
#| label: 'Correlation Volcano Plot 34'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/PGE_genus_asso/7_correlation_volcano_plot.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Significant Module Metadata Corr
```{python}
#| label: 'Significant Module Metadata Corr 27'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/PGE_genus_asso/8_significant_module_metadata_corr.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Top Correlations Heatmap

```{python}
#| label: 'Top Correlations Heatmap 35'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/PGE_genus_asso/9_top_correlations_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

## Pge Species Asso
### Pge Sp Metrics Asso
```{python}
#| label: 'Pge Sp Metrics Asso 28'
#| fig-cap: ""

df = pd.read_excel(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/PGE_species_asso/1_PGE_sp_metrics_asso.xlsx')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Cclasso Nosinglt 55 Edgelist
**Number of nodes:** 18

**Number of edges:** 20


<div style="text-align: center;">
<iframe src="static/Cclasso_Nosinglt_55_Edgelist.html" alt="Cclasso Nosinglt 55 Edgelist plot"
        width="800px" height="630px">
</iframe>
</div>

### Module Means
```{python}
#| label: 'Module Means 29'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/PGE_species_asso/3_module_means.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Module Means Heatmap

```{python}
#| label: 'Module Means Heatmap 37'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/PGE_species_asso/4_module_means_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Violin Plot Module Variability

```{python}
#| label: 'Violin Plot Module Variability 38'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/PGE_species_asso/5_violin_plot_module_variability.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Module Metadata Correlations
```{python}
#| label: 'Module Metadata Correlations 30'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/PGE_species_asso/6_module_metadata_correlations.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Correlation Volcano Plot

```{python}
#| label: 'Correlation Volcano Plot 39'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/PGE_species_asso/7_correlation_volcano_plot.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```

### Significant Module Metadata Corr
```{python}
#| label: 'Significant Module Metadata Corr 31'
#| fig-cap: ""

df = pd.read_csv(report_dir / '../AirBiome_microbial_association_networks_summary/Association_networks/PGE_species_asso/8_significant_module_metadata_corr.csv')

show(df, classes="display nowrap compact", lengthMenu=[3, 5, 10])
```

### Top Correlations Heatmap

```{python}
#| label: 'Top Correlations Heatmap 40'
#| fig-cap: ""

with open(report_dir /'../AirBiome_microbial_association_networks_summary/Association_networks/PGE_species_asso/9_top_correlations_heatmap.json', 'r') as plot_file:
    plot_json = json.load(plot_file)

# Keep only 'data' and 'layout' sections
plot_json = {key: plot_json[key] for key in plot_json
                if key in ['data', 'layout']
            }
# Remove 'frame' section in 'data'
plot_json['data'] = [{k: v for k, v in entry.items() if k != 'frame'}
                            for entry in plot_json.get('data', [])
                    ]
# Convert JSON to string
plot_json_str = json.dumps(plot_json)
# Create the plotly plot
fig_plotly = pio.from_json(plot_json_str)
fig_plotly.update_layout(autosize=False, width=950, height=400,
                         margin=dict(b=50, t=50, l=50, r=50)
                         )

fig_plotly.show()
```
